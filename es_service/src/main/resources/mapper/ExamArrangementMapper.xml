<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.es.dao.ExamArrangementMapper">
  <resultMap id="BaseResultMap" type="org.es.model.ExamArrangement">
    <id column="NO" jdbcType="INTEGER" property="no" />
    <result column="SNO" jdbcType="VARCHAR" property="sno" />
    <result column="SEAT_NUMBER" jdbcType="INTEGER" property="seatNumber" />
    <result column="EXAMNO" jdbcType="INTEGER" property="examno" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    NO, SNO, SEAT_NUMBER, EXAMNO
  </sql>
  <select id="selectByCondition" parameterType="org.es.model.ExamArrangement" 
                                 resultType="map" >
     
   select a.NO, SNO, COURSE_NO, TERMTIME, YEARTIME, WEEKTH, WEEKNO, SCHOOLTIME, b.classno, SEAT_NUMBER, 
    COLLEGE
    FROM exam_arrangement a,CLASSROOM b,exam_arrangement_statis c
    WHERE c.exam_place = b.no AND a.examno = c.no
  
    <if test="sno!=null">
    	AND sno = #{sno}
    </if>
    <if test="examno!=null">
    	and c.no = #{examno}
    </if>
  </select>
  <select id="getStudentByCourseNo" resultType="string" parameterType="string">
      select sno FROM v_selectcourse_info WHERE course_no = #{_parameter} order by sno
  </select>
  <select id="selectByExample" parameterType="org.es.model.ExamArrangementExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from exam_arrangement
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from exam_arrangement
    where NO = #{no,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from exam_arrangement
    where NO = #{no,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="org.es.model.ExamArrangementExample">
    delete from exam_arrangement
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="org.es.model.ExamArrangement">
    insert into exam_arrangement (NO, SNO, SEAT_NUMBER, 
      EXAMNO)
    values (#{no,jdbcType=INTEGER}, #{sno,jdbcType=VARCHAR}, #{seatNumber,jdbcType=INTEGER}, 
      #{examno,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="org.es.model.ExamArrangement">
    insert into exam_arrangement
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="no != null">
        NO,
      </if>
      <if test="sno != null">
        SNO,
      </if>
      <if test="seatNumber != null">
        SEAT_NUMBER,
      </if>
      <if test="examno != null">
        EXAMNO,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="no != null">
        #{no,jdbcType=INTEGER},
      </if>
      <if test="sno != null">
        #{sno,jdbcType=VARCHAR},
      </if>
      <if test="seatNumber != null">
        #{seatNumber,jdbcType=INTEGER},
      </if>
      <if test="examno != null">
        #{examno,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="org.es.model.ExamArrangementExample" resultType="java.lang.Long">
    select count(*) from exam_arrangement
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update exam_arrangement
    <set>
      <if test="record.no != null">
        NO = #{record.no,jdbcType=INTEGER},
      </if>
      <if test="record.sno != null">
        SNO = #{record.sno,jdbcType=VARCHAR},
      </if>
      <if test="record.seatNumber != null">
        SEAT_NUMBER = #{record.seatNumber,jdbcType=INTEGER},
      </if>
      <if test="record.examno != null">
        EXAMNO = #{record.examno,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update exam_arrangement
    set NO = #{record.no,jdbcType=INTEGER},
      SNO = #{record.sno,jdbcType=VARCHAR},
      SEAT_NUMBER = #{record.seatNumber,jdbcType=INTEGER},
      EXAMNO = #{record.examno,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="org.es.model.ExamArrangement">
    update exam_arrangement
    <set>
      <if test="sno != null">
        SNO = #{sno,jdbcType=VARCHAR},
      </if>
      <if test="seatNumber != null">
        SEAT_NUMBER = #{seatNumber,jdbcType=INTEGER},
      </if>
      <if test="examno != null">
        EXAMNO = #{examno,jdbcType=INTEGER},
      </if>
    </set>
    where NO = #{no,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.es.model.ExamArrangement">
    update exam_arrangement
    set SNO = #{sno,jdbcType=VARCHAR},
      SEAT_NUMBER = #{seatNumber,jdbcType=INTEGER},
      EXAMNO = #{examno,jdbcType=INTEGER}
    where NO = #{no,jdbcType=INTEGER}
  </update>
</mapper>