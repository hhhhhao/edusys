<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.es.dao.ExamAbnormalMapper">
	<resultMap id="BaseResultMap" type="org.es.model.ExamAbnormal">
		<id column="NO" jdbcType="INTEGER" property="no" />
		<result column="SNO" jdbcType="VARCHAR" property="sno" />
		<result column="STATUSNO" jdbcType="INTEGER" property="statusno" />
		<result column="RECORDNO" jdbcType="VARCHAR" property="recordno" />
		<result column="RECORDTIME" jdbcType="VARCHAR" property="recordtime" />
		<result column="COURSENO" jdbcType="VARCHAR" property="courseno" />
		<result column="YEARTIME" jdbcType="VARCHAR" property="yeartime" />
		<result column="TERMTIME" jdbcType="INTEGER" property="termtime" />
	</resultMap>
	<sql id="Example_Where_Clause">
		<where>
			<foreach collection="oredCriteria" item="criteria" separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach close=")" collection="criterion.value" item="listItem"
										open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Update_By_Example_Where_Clause">
		<where>
			<foreach collection="example.oredCriteria" item="criteria"
				separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach close=")" collection="criterion.value" item="listItem"
										open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Base_Column_List">
		NO, SNO, STATUSNO, RECORDNO, RECORDTIME, COURSENO, YEARTIME, TERMTIME
	</sql>
	<select id="selectExamAboByCondition" parameterType="org.es.service.manager.exam.ExamAboQueryCondition"
		resultType="map">
		SELECT
		a.*,b.STATUS_NAME
		FROM exam_abnormal a,exam_status b
		WHERE a.STATUSNO = b.NO
		<if test="yeartime!=null">
			and yeartime = #{yeartime}
		</if>
		<if test="termtime!=null">
			and termtime = #{termtime}
		</if>
		<if test="courseNo!=null">
			and courseno = #{courseNo}
		</if>
		<if test="sno!=null">
			and sno = #{sno}
		</if>
	</select>
	<select id="selectByExample" parameterType="org.es.model.ExamAbnormalExample"
		resultMap="BaseResultMap">
		select
		<if test="distinct">
			distinct
		</if>
		<include refid="Base_Column_List" />
		from exam_abnormal
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="orderByClause != null">
			order by ${orderByClause}
		</if>
	</select>
	<select id="selectByPrimaryKey" parameterType="java.lang.Integer"
		resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from exam_abnormal
		where NO = #{no,jdbcType=INTEGER}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from exam_abnormal
		where NO = #{no,jdbcType=INTEGER}
	</delete>
	<delete id="deleteByExample" parameterType="org.es.model.ExamAbnormalExample">
		delete from exam_abnormal
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</delete>
	<insert id="insert" parameterType="org.es.model.ExamAbnormal">
		insert into exam_abnormal (NO, SNO, STATUSNO,
		RECORDNO, RECORDTIME, COURSENO,
		YEARTIME, TERMTIME)
		values (#{no,jdbcType=INTEGER}, #{sno,jdbcType=VARCHAR},
		#{statusno,jdbcType=INTEGER},
		#{recordno,jdbcType=VARCHAR}, #{recordtime,jdbcType=VARCHAR}, #{courseno,jdbcType=VARCHAR},
		#{yeartime,jdbcType=VARCHAR}, #{termtime,jdbcType=INTEGER})
	</insert>
	<insert id="insertSelective" parameterType="org.es.model.ExamAbnormal">
		insert into exam_abnormal
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="no != null">
				NO,
			</if>
			<if test="sno != null">
				SNO,
			</if>
			<if test="statusno != null">
				STATUSNO,
			</if>
			<if test="recordno != null">
				RECORDNO,
			</if>
			<if test="recordtime != null">
				RECORDTIME,
			</if>
			<if test="courseno != null">
				COURSENO,
			</if>
			<if test="yeartime != null">
				YEARTIME,
			</if>
			<if test="termtime != null">
				TERMTIME,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="no != null">
				#{no,jdbcType=INTEGER},
			</if>
			<if test="sno != null">
				#{sno,jdbcType=VARCHAR},
			</if>
			<if test="statusno != null">
				#{statusno,jdbcType=INTEGER},
			</if>
			<if test="recordno != null">
				#{recordno,jdbcType=VARCHAR},
			</if>
			<if test="recordtime != null">
				#{recordtime,jdbcType=VARCHAR},
			</if>
			<if test="courseno != null">
				#{courseno,jdbcType=VARCHAR},
			</if>
			<if test="yeartime != null">
				#{yeartime,jdbcType=VARCHAR},
			</if>
			<if test="termtime != null">
				#{termtime,jdbcType=INTEGER},
			</if>
		</trim>
	</insert>
	<select id="countByExample" parameterType="org.es.model.ExamAbnormalExample"
		resultType="java.lang.Long">
		select count(*) from exam_abnormal
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</select>
	<update id="updateByExampleSelective" parameterType="map">
		update exam_abnormal
		<set>
			<if test="record.no != null">
				NO = #{record.no,jdbcType=INTEGER},
			</if>
			<if test="record.sno != null">
				SNO = #{record.sno,jdbcType=VARCHAR},
			</if>
			<if test="record.statusno != null">
				STATUSNO = #{record.statusno,jdbcType=INTEGER},
			</if>
			<if test="record.recordno != null">
				RECORDNO = #{record.recordno,jdbcType=VARCHAR},
			</if>
			<if test="record.recordtime != null">
				RECORDTIME = #{record.recordtime,jdbcType=VARCHAR},
			</if>
			<if test="record.courseno != null">
				COURSENO = #{record.courseno,jdbcType=VARCHAR},
			</if>
			<if test="record.yeartime != null">
				YEARTIME = #{record.yeartime,jdbcType=VARCHAR},
			</if>
			<if test="record.termtime != null">
				TERMTIME = #{record.termtime,jdbcType=INTEGER},
			</if>
		</set>
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByExample" parameterType="map">
		update exam_abnormal
		set NO = #{record.no,jdbcType=INTEGER},
		SNO = #{record.sno,jdbcType=VARCHAR},
		STATUSNO = #{record.statusno,jdbcType=INTEGER},
		RECORDNO = #{record.recordno,jdbcType=VARCHAR},
		RECORDTIME = #{record.recordtime,jdbcType=VARCHAR},
		COURSENO = #{record.courseno,jdbcType=VARCHAR},
		YEARTIME = #{record.yeartime,jdbcType=VARCHAR},
		TERMTIME = #{record.termtime,jdbcType=INTEGER}
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByPrimaryKeySelective" parameterType="org.es.model.ExamAbnormal">
		update exam_abnormal
		<set>
			<if test="sno != null">
				SNO = #{sno,jdbcType=VARCHAR},
			</if>
			<if test="statusno != null">
				STATUSNO = #{statusno,jdbcType=INTEGER},
			</if>
			<if test="recordno != null">
				RECORDNO = #{recordno,jdbcType=VARCHAR},
			</if>
			<if test="recordtime != null">
				RECORDTIME = #{recordtime,jdbcType=VARCHAR},
			</if>
			<if test="courseno != null">
				COURSENO = #{courseno,jdbcType=VARCHAR},
			</if>
			<if test="yeartime != null">
				YEARTIME = #{yeartime,jdbcType=VARCHAR},
			</if>
			<if test="termtime != null">
				TERMTIME = #{termtime,jdbcType=INTEGER},
			</if>
		</set>
		where NO = #{no,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey" parameterType="org.es.model.ExamAbnormal">
		update exam_abnormal
		set SNO = #{sno,jdbcType=VARCHAR},
		STATUSNO = #{statusno,jdbcType=INTEGER},
		RECORDNO = #{recordno,jdbcType=VARCHAR},
		RECORDTIME = #{recordtime,jdbcType=VARCHAR},
		COURSENO = #{courseno,jdbcType=VARCHAR},
		YEARTIME = #{yeartime,jdbcType=VARCHAR},
		TERMTIME = #{termtime,jdbcType=INTEGER}
		where NO = #{no,jdbcType=INTEGER}
	</update>
</mapper>