<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.es.dao.DegreeMapper">
  <resultMap id="BaseResultMap" type="org.es.model.Degree">
    <id column="NO" jdbcType="INTEGER" property="no" />
    <result column="WORKER_NO" jdbcType="INTEGER" property="workerNo" />
    <result column="GRADUATIONSCHOOL" jdbcType="VARCHAR" property="graduationschool" />
    <result column="GRADUATIOINTIME" jdbcType="TIMESTAMP" property="graduatiointime" />
    <result column="DEGREE" jdbcType="VARCHAR" property="degree" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    NO, WORKER_NO, GRADUATIONSCHOOL, GRADUATIOINTIME, DEGREE
  </sql>
  <select id="selectByExample" parameterType="org.es.model.DegreeExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from degree
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from degree
    where NO = #{no,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from degree
    where NO = #{no,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="org.es.model.DegreeExample">
    delete from degree
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="org.es.model.Degree">
    insert into degree (NO, WORKER_NO, GRADUATIONSCHOOL, 
      GRADUATIOINTIME, DEGREE)
    values (#{no,jdbcType=INTEGER}, #{workerNo,jdbcType=INTEGER}, #{graduationschool,jdbcType=VARCHAR}, 
      #{graduatiointime,jdbcType=TIMESTAMP}, #{degree,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="org.es.model.Degree">
    insert into degree
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="no != null">
        NO,
      </if>
      <if test="workerNo != null">
        WORKER_NO,
      </if>
      <if test="graduationschool != null">
        GRADUATIONSCHOOL,
      </if>
      <if test="graduatiointime != null">
        GRADUATIOINTIME,
      </if>
      <if test="degree != null">
        DEGREE,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="no != null">
        #{no,jdbcType=INTEGER},
      </if>
      <if test="workerNo != null">
        #{workerNo,jdbcType=INTEGER},
      </if>
      <if test="graduationschool != null">
        #{graduationschool,jdbcType=VARCHAR},
      </if>
      <if test="graduatiointime != null">
        #{graduatiointime,jdbcType=TIMESTAMP},
      </if>
      <if test="degree != null">
        #{degree,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="org.es.model.DegreeExample" resultType="java.lang.Long">
    select count(*) from degree
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update degree
    <set>
      <if test="record.no != null">
        NO = #{record.no,jdbcType=INTEGER},
      </if>
      <if test="record.workerNo != null">
        WORKER_NO = #{record.workerNo,jdbcType=INTEGER},
      </if>
      <if test="record.graduationschool != null">
        GRADUATIONSCHOOL = #{record.graduationschool,jdbcType=VARCHAR},
      </if>
      <if test="record.graduatiointime != null">
        GRADUATIOINTIME = #{record.graduatiointime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.degree != null">
        DEGREE = #{record.degree,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update degree
    set NO = #{record.no,jdbcType=INTEGER},
      WORKER_NO = #{record.workerNo,jdbcType=INTEGER},
      GRADUATIONSCHOOL = #{record.graduationschool,jdbcType=VARCHAR},
      GRADUATIOINTIME = #{record.graduatiointime,jdbcType=TIMESTAMP},
      DEGREE = #{record.degree,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="org.es.model.Degree">
    update degree
    <set>
      <if test="workerNo != null">
        WORKER_NO = #{workerNo,jdbcType=INTEGER},
      </if>
      <if test="graduationschool != null">
        GRADUATIONSCHOOL = #{graduationschool,jdbcType=VARCHAR},
      </if>
      <if test="graduatiointime != null">
        GRADUATIOINTIME = #{graduatiointime,jdbcType=TIMESTAMP},
      </if>
      <if test="degree != null">
        DEGREE = #{degree,jdbcType=VARCHAR},
      </if>
    </set>
    where NO = #{no,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.es.model.Degree">
    update degree
    set WORKER_NO = #{workerNo,jdbcType=INTEGER},
      GRADUATIONSCHOOL = #{graduationschool,jdbcType=VARCHAR},
      GRADUATIOINTIME = #{graduatiointime,jdbcType=TIMESTAMP},
      DEGREE = #{degree,jdbcType=VARCHAR}
    where NO = #{no,jdbcType=INTEGER}
  </update>
</mapper>